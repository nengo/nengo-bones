"""Applies validation to auto-generated files."""

import difflib
import pathlib
import sys

import click

from nengo_bones import __version__, all_files
from nengo_bones.config import load_config
from nengo_bones.scripts.base import bones
from nengo_bones.templates import BonesTemplate, load_env


@bones.command(name="check")
@click.option(
    "--root-dir", default=".", help="Directory containing files to be checked"
)
@click.option("--conf-file", default=None, help="Filepath for config file")
@click.option(
    "--verbose", is_flag=True, help="Show more information about failed checks."
)
def main(root_dir, conf_file, verbose):
    """
    Validates auto-generated project files.

    Note: This does not check the ci scripts, because those are generated
    on-the-fly during CI (so any ci files we do find are likely local artifacts).
    """

    config = load_config(conf_file)
    env = load_env()
    path = pathlib.Path(root_dir)

    click.echo("*" * 50)
    click.echo("Checking content of nengo-bones generated files:")
    click.echo(f"root dir: {root_dir}\n")

    passed = True

    for filename in all_files:
        full_filename = filename.replace("pkg", config["pkg_name"])
        click.echo(full_filename + ":")

        # TODO: Ensure that the file is there <=> it is in the config
        if not (path / full_filename).exists():
            click.echo("  File not found")
            continue

        with (path / full_filename).open(encoding="utf-8") as f:
            current_lines = f.readlines()

        for line in current_lines[:50]:
            if "Automatically generated by nengo-bones" in line:
                break
        else:
            click.echo("  This file was not generated with nengo-bones")
            continue

        template = BonesTemplate(filename, env)
        if template.section not in config:
            click.secho(
                "  This file contains 'Automatically generated by nengo-bones',\n"
                "  but there is no corresponding configuration in .nengobones.yml.\n"
                "  Please remove this text or configure it in .nengobones.yml.",
                fg="red",
            )
            passed = False
            continue

        new_lines = template.render(**template.get_render_data(config)).splitlines(
            keepends=True
        )

        diff = list(
            difflib.unified_diff(
                current_lines,
                new_lines,
                fromfile=f"current {filename}",
                tofile=f"new {filename}",
            )
        )

        if len(diff) > 0:
            click.secho(
                f"  Content does not match nengo-bones (version {__version__});\n"
                "  please update by running `bones generate` from\n"
                "  the root directory.",
                fg="red",
            )
            if verbose:
                click.echo("\n  Full diff")
                click.echo("  =========")
                for line in diff:
                    click.echo(f"  {line.rstrip()}")
            passed = False
        else:
            click.secho("  Up to date", fg="green")

    click.echo("*" * 50)

    if not passed:
        sys.exit(1)
