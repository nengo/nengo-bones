#!/usr/bin/env python

# Automatically generated by nengo-bones, do not edit this file directly

import io
import os
import runpy

try:
    from setuptools import find_packages, setup
except ImportError:
    raise ImportError(
        "'setuptools' is required but not installed. To install it, "
        "follow the instructions at "
        "https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py"
    )


def read(*filenames, **kwargs):
    encoding = kwargs.get("encoding", "utf-8")
    sep = kwargs.get("sep", "\n")
    buf = []
    for filename in filenames:
        with io.open(filename, encoding=encoding) as f:
            buf.append(f.read())
    return sep.join(buf)


root = os.path.dirname(os.path.realpath(__file__))
version = runpy.run_path(os.path.join(root, "{{ pkg_name }}", "version.py"))["version"]

{% block install_req %}
install_req = [
    {% for pkg in install_req %}
    "{{ pkg }}",
    {% endfor %}
]
{% endblock %}
docs_req = [
    {% for pkg in docs_req %}
    "{{ pkg }}",
    {% endfor %}
]
optional_req = [
    {% for pkg in optional_req %}
    "{{ pkg }}",
    {% endfor %}
]
tests_req = [
    {% for pkg in tests_req %}
    "{{ pkg }}",
    {% endfor %}
]

setup(
    name="{{ pkg_name|replace("_", "-") }}",
    version=version,
    author="{{ author }}",
    author_email="{{ author_email }}",
    packages=find_packages(),
    url="{{ url }}",
    include_package_data={{ include_package_data }},
    license="{{ license }}",
    description="{{ description }}",
    long_description=read("README.rst", "CHANGES.rst"),
    zip_safe=False,
    install_requires=install_req,
    extras_require={
        "all": docs_req + optional_req + tests_req,
        "docs": docs_req,
        "optional": optional_req,
        "tests": tests_req,
    },
    python_requires="{{ python_requires }}",
    {% for param, (type, vals) in extras.items() %}
    {% if type == "list" %}
    {{ param }}=[
        {% for val in vals %}
        "{{ val }}",
        {% endfor %}
    ],
    {% elif type == "dict" %}
    {{ param }}={
        {% for subkey, subvals in vals.items() %}
        "{{ subkey }}": [
            {% for subval in subvals %}
            "{{ subval }}",
            {% endfor %}
        ],
        {% endfor %}
    },
    {% endif %}
    {% endfor %}
)
