{% extends "templates/remote.sh.template" %}

{% set env_vars %}
{% block env_vars %}
        # copy environment variables into remote environment
        export JOB_NUMBER="$JOB_NUMBER"
        export GIT_BRANCH="$GIT_BRANCH"
        export GIT_TAG="$GIT_TAG"
        export TEST_ARGS="$TEST_ARGS"
        {% if remote_vars %}
        {% for var, val in remote_vars.items() %}
        export {{ var }}="{{ val }}"
        {% endfor %}
        {% endif %}
{% endblock %}
{% endset %}

{% block remote_install %}
{{ super() }}
{{ env_vars }}

        # generate CI scripts on remote device
        # ensure nengo-bones version is the same as the one installed on host
        pip install $(pip freeze | grep nengo-bones | awk '{print $(NF)}')
        bones generate --output-dir .ci ci-scripts || REMOTE_STATUS=1

        {% for line in remote_setup %}
        {{ line }}
        {% endfor %}

        bash .ci/{{ remote_script }}.sh install || REMOTE_STATUS=1
{% endblock %}

{% block remote_script %}
{{ super() }}
{{ env_vars }}

        echo "Waiting for lock on device $DEVICE_ID"
        (
            flock -x -w 540 200 || exit 1
            bash .ci/{{ remote_script }}.sh script || exit 1
        ) 200>/var/lock/.ci.exclusivelock."$DEVICE_ID" || REMOTE_STATUS=1
{% endblock %}

{% block after_script %}
    {% if remote_script == "docs" %}
    REMOTE_FAILED_FILE="tmp/{{ pkg }}-$JOB_NUMBER/{{ pkg }}/$JOB_NUMBER.failed"
    ssh -q {{ host }} [[ -e "$REMOTE_FAILED_FILE" ]] && exe scp {{ host }}:"$REMOTE_FAILED_FILE" .
    exe rsync -azh "{{ host }}:./tmp/{{ pkg }}-$JOB_NUMBER/{{ pkg }}-docs" ..
    {% elif coverage %}
    COVERAGE_FILE="tmp/{{ pkg }}-$JOB_NUMBER/{{ pkg }}/{% if codecov_yml %}coverage.xml{% else %}.coverage{% endif %}"
    exe scp {{ host }}:"$COVERAGE_FILE" .
    {% endif %}
    exe bash "$SCRIPT_DIR/{{ remote_script }}.sh" after_script
{{ super() }}
{% endblock %}
