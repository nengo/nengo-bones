# Automatically generated by nengo-bones, do not edit this file directly
# Version: {{ version }}

language: python
python:
  - "3.6"
notifications:
  email:
    on_success: change
    on_failure: change
# cache:
#   directories:
#   - $HOME/miniconda

dist: trusty

env:
  global:
    - SCRIPT="test"
    - PYTHON_VERSION="{{ python_version }}"
    - PIP_UPGRADE="true"  # always upgrade to latest version
    - PIP_UPGRADE_STRATEGY="eager"  # upgrade all dependencies
    - TEST_ARGS=""
    - COV_CORE_SOURCE={{ pkg_name }}  # early start pytest-cov engine
    - COV_CORE_CONFIG=.coveragerc
    - COV_CORE_DATAFILE=.coverage.eager
    - BRANCH_NAME="${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}"
    {% for var, val in global_vars.items() %}
    - {{ var|upper }}="{{ val }}"
    {% endfor %}

jobs:
  include:
  {% for job in jobs %}
  -
    {% if job["env"] %}
    env:
      {% for var, val in job["env"].items() %}
      {{ var|upper }}="{{ val }}"
      {% endfor %}
    {% endif %}
    {% for key, val in job.items() if key != "env" %}
    {{ key }}: {{ val }}
    {% endfor %}
  {% endfor %}
  {% if pypi_user %}
  - stage: deploy
    if: branch =~ ^release-candidate-* OR tag =~ ^v[0-9]*
    env: SCRIPT="deploy"
    cache: false
    deploy:
      - provider: pypi
        server: https://test.pypi.org/legacy/
        user: {{ pypi_user }}
        password: $PYPI_TOKEN
        distributions: "{% for dist in deploy_dists -%} {{ dist }} {% endfor %}"
        on:
          all_branches: true
          condition: $TRAVIS_BRANCH =~ ^release-candidate-*
          condition: $TRAVIS_TAG = ""
      - provider: pypi
        user: {{ pypi_user }}
        password: $PYPI_TOKEN
        distributions: "{% for dist in deploy_dists -%} {{ dist }} {% endfor %}"
        on:
          all_branches: true
          condition: $TRAVIS_TAG =~ ^v[0-9]*
  {% endif %}

before_install:
  # export travis_terminate for use in scripts
  - export -f travis_terminate
    _travis_terminate_linux
    _travis_terminate_osx
    _travis_terminate_unix
    _travis_terminate_windows
  # install/run nengo-bones
  - pip install {{ bones_install }}
  - generate-bones --output-dir .ci --template-dir .ci ci-scripts
  - check-bones
  # set up conda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - if ! [[ -d $HOME/miniconda/envs/test ]]; then
      rm -rf $HOME/miniconda;
      wget -q http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      conda update -q -y conda;
      conda create -q -y -n test python=$PYTHON_VERSION pip;
    else
      conda update -q -y conda;
    fi
  - conda config --set always_yes yes --set changeps1 no
  - source activate test
  # upgrade pip
  - pip install pip
  # display environment info
  - conda info -a
  - conda list -e
  - pip freeze

install:
  - .ci/$SCRIPT.sh install
  - conda list -e
  - pip freeze

after_install:
  - .ci/$SCRIPT.sh after_install

before_script:
  - .ci/$SCRIPT.sh before_script

script:
  - .ci/$SCRIPT.sh script

before_cache:
  - .ci/$SCRIPT.sh before_cache

after_success:
  - .ci/$SCRIPT.sh after_success

after_failure:
  - .ci/$SCRIPT.sh after_failure

before_deploy:
  - .ci/$SCRIPT.sh before_deploy

after_deploy:
  - .ci/$SCRIPT.sh after_deploy

after_script:
  - .ci/$SCRIPT.sh after_script
