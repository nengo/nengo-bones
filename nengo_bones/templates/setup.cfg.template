# Automatically generated by nengo-bones, do not edit this file directly

[build_sphinx]
source-dir = docs
build-dir = docs/_build
all_files = 1

[coverage:run]
source = {{ pkg_name }}

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    # place ``# pragma: no cover`` at the end of a line to ignore it
    pragma: no cover

    # Don't complain if tests don't hit defensive assertion code:
    raise NotImplementedError

    # `pass` is just a placeholder, fine if it's not covered
    ^[ \t]*pass$

    {% for exclude in coverage.exclude_lines %}
    {{ exclude }}
    {% endfor %}

# Patterns for files to exclude from reporting
omit =
    */tests/test*
    {% for omit in coverage.omit_files %}
    {{ omit }}
    {% endfor %}

[flake8]
exclude =
    __init__.py
    {% for exclude in flake8.exclude %}
    {{ exclude }}
    {% endfor %}
ignore =
    E123
    E133
    E203
    E226
    E241
    E242
    E501
    E731
    F401
    W503
    {% for ignore in flake8.ignore %}
    {{ ignore }}
    {% endfor %}
max-complexity = 10
max-line-length = 88

[tool:pytest]
{% if pytest.addopts %}
addopts = {%- for opt in pytest.addopts %} {{ opt }} {%- endfor %}

{% endif %}
xfail_strict = {{ pytest.xfail_strict }}
norecursedirs =
    .*
    *.egg
    build
    dist
    docs
    {% for dir in pytest.norecursedirs %}
    {{ dir }}
    {% endfor %}
{% if pytest.markers %}
markers =
    {% for marker, desc in pytest.markers.items() %}
    {{ marker }}: {{ desc }}
    {% endfor %}
{% endif %}
{% if pytest.filterwarnings %}
filterwarnings =
    {% for filter in pytest.filterwarnings %}
    {{ filter }}
    {% endfor %}
{% endif %}
{% if pytest.nengo_test_unsupported %}
nengo_test_unsupported =
{% for var, val in pytest.nengo_test_unsupported.items() %}
    {{ var }}
        "{{ val | wordwrap(break_long_words=False, wrapstring="\n        ") }}"
{% endfor %}
{% endif %}
{% if pytest.allclose_tolerances %}
allclose_tolerances =
{% for item in pytest.allclose_tolerances %}
    {{ item }}
{% endfor %}
{% endif %}

[pylint]
# note: pylint doesn't look in setup.cfg by default, need to call it with
# `pylint ... --rcfile=setup.cfg`
{% if pylint.ignore %}
ignore =
    {% for ignore in pylint.ignore %}
    {{ ignore }},
    {% endfor %}
{% endif %}
disable =
    arguments-differ,
    assignment-from-no-return,
    attribute-defined-outside-init,
    bad-continuation,
    blacklisted-name,
    comparison-with-callable,
    duplicate-code,
    fixme,
    import-error,
    invalid-name,
    invalid-sequence-index,
    len-as-condition,
    literal-comparison,
    no-else-raise,
    no-else-return,
    no-member,
    no-name-in-module,
    no-self-use,
    not-an-iterable,
    not-context-manager,
    protected-access,
    redefined-builtin,
    stop-iteration-return,
    too-few-public-methods,
    too-many-arguments,
    too-many-branches,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-return-statements,
    too-many-statements,
    unexpected-keyword-arg,
    unidiomatic-typecheck,
    unsubscriptable-object,
    unsupported-assignment-operation,
    unused-argument,
    {% for disable in pylint.disable %}
    {{ disable }},
    {% endfor %}
known-third-party =
    matplotlib,
    nengo,
    numpy,
    pytest,
    {% for third_party in pylint.known_third_party %}
    {{ third_party }},
    {% endfor %}
max-line-length = 88
valid-metaclass-classmethod-first-arg = metacls
reports = no
score = no
